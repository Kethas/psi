#[global_whitespace]
ws: " "
  | "\t"
  | "\n"
  | "\r"

#[consume_all]
start: expr


#[precedence = 30]
expr: "-" expr -> { type: "Neg", operand: $0 }
    | expr

#[precedence = 20]
expr: expr "+" expr -> { type: "Add", operand_a: $0, operand_b: $1 }
    | expr "-" expr -> { type: "Sub", operand_a: $0, operand_b: $1 }
    | expr

#[precedence = 10]
expr: expr "*" expr -> { type: "Mul", operand_a: $0, operand_b: $1 }
    | expr "/" expr -> { type: "Div", operand_a: $0, operand_b: $1 }
    | expr
 
#[precedence = 0] // default
expr: number -> { type: "Number", literal: $1}
    | "(" expr ")" -> $1

#[no_whitespace]
#[no_comment]
{   
    number: digit_nonzero digits -> $0 ++ $1
          | zero

    digit_nonzero: "1".."9"
    zero: "0"
    digit: zero | digit_nonzero

    digits: _ -> ""
          | digit digits -> $0 ++ $1

}









//## THIS IS IT!!!
2 + 3 * 8
8 * 3 + 2

expr: expr_30

expr_30: "-" expr_30
       | expr_20

expr_20: expr_10 "+" expr_20
       | expr_10 "-" expr_20
       | expr_10

expr_10: expr_0 "*" expr_10
       | expr_0 "/" expr_10
       | expr_0
##//


----------------------------------------------------------------
rust:


#[derive(FromObject)]
enum AST {
    Neg {
        operand: Box<AST>
    },
    ...
}

let result = parser.parse_into::<AST>(grammar);